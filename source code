# Import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

# Step 1: Load dataset
df = pd.read_csv('telco_customer_churn.csv')

# Step 2: Handle missing values
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df.dropna(inplace=True)

# Step 3: Drop irrelevant columns
df.drop(['customerID'], axis=1, inplace=True)

# Step 4: Encode categorical features
categorical_cols = df.select_dtypes(include='object').columns.tolist()
categorical_cols.remove('Churn')  # We will encode this separately

df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

# Step 5: Encode target variable
df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})

# Step 6: Split features and target
X = df.drop('Churn', axis=1)
y = df['Churn']

# Step 7: Normalize numeric columns
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 8: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42, stratify=y)

# Step 9: Train model
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Step 10: Evaluate model
y_pred = rf.predict(X_test)

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred))
